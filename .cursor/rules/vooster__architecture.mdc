---
description:
globs:
alwaysApply: true
---
# 기술 요구사항 문서 (TRD)

## 1. 기술 총괄 개요
- **프로젝트 개요**  
  “MTG Gacha” 모바일 앱·모바일 웹 플랫폼은 Capacitor 기반 단일 코드베이스(모노레포)로 구축되며, Supabase(PostgreSQL) + Node.js(Micro-Service) 조합을 활용해 카드 뽑기, 결제, 포인트 전환, 굿즈 교환 기능을 제공한다.
- **핵심 기술 스택**  
  - 프런트엔드: Next.js 14 (React 18, TypeScript) + Capacitor 5  
  - 백엔드: Supabase 2.0(PostgreSQL 15, Supabase Auth/Edge Functions) + Node.js 20(Express)  
  - 인프라: Vercel(웹 호스팅) / Supabase(데이터·Auth) / Fly.io(Node 마이크로서비스) / Cloudflare CDN  
- **주요 기술 목표**  
  1. 95퍼센타일 API 응답 < 300 ms  
  2. 트랜잭션 성공률 99 % 이상, 결제 사기 < 0.3 %  
  3. 100k DAU까지 수평 확장 가능  
- **중대한 기술 가정**  
  - Supabase의 Row-Level Security로 데이터 보호 가능  
  - Vercel + Edge Function 구조로 LCP 2.5 s 이하 달성  
  - 결제 비즈니스 로직은 Stripe · Apple/Google IAP · Toss Payments SDK로 분리

## 2. 기술 스택 아키텍처
### 프런트엔드 기술 스택
- **코어 프레임워크**: Next.js 14 (App Router, React Server Components 적용)  
- **상태 관리**: React Query 5 + Context API (필요 시 Zustand)  
- **라우팅 & 내비게이션**: Next.js App Router / React Navigation(Capacitor)  
- **UI/UX 프레임워크**: Tailwind CSS 3 + Headless UI; 애니메이션은 Framer Motion  
- **빌드 툴**: Vite 기반 Next.js Turbopack, ESLint, Prettier, Husky(커밋 훅)

### 백엔드 기술 스택
- **런타임 환경**: Node.js 20 (TypeScript)  
- **웹 프레임워크**: Express 4 (가볍고 검증된 미들웨어 생태계)  
- **API 디자인 패턴**: RESTful (JSON); gacha 엔진은 내부 RPC(JSON over HTTPS)  
- **데이터 검증**: Zod 스키마; Celebrate(Joi) 미들웨어  
- **미들웨어 구성요소**: morgan(로깅), helmet(보안 헤더), rate-limit(속도 제한), Sentry(Error)

### 데이터베이스 & 퍼시스턴스
- **주 데이터베이스**: PostgreSQL 15 (Supabase Managed)  
  - 이유: ACID 보장, JSONB·CTE 지원, Supabase와 기본 통합
- **스키마 설계**: 3NF+부분 비정규화, 파티셔닝(카드 풀 로그), RLS 적용  
- **캐싱 전략**: Redis 7 (Fly.io Redis®) – 세션, 빈번한 읽기용 메타데이터 캐시  
- **데이터 마이그레이션**: Supabase Migrations + Sqitch 버전 관리  
- **백업 & 복구**: Supabase 자동 스냅샷(1일 1회, 30일 보존) + 외부 S3 주간 백업

### 인프라 & DevOps
- **호스팅 환경**:  
  - 웹: Vercel 자동 배포  
  - 백엔드: Fly.io(프리 리전, 수평 오토스케일)  
  - 데이터: Supabase 서비-스케일 플랜  
- **컨테이너라이제이션**: Docker Compose(로컬) + Fly Launch(Dockerfile)  
- **CI/CD 파이프라인**: GitHub Actions → 테스트 → 빌드 → 배포  
- **모니터링 & 가시성**: Grafana Cloud(Prometheus), Sentry, PostHog  
- **로깅 전략**: Cloudflare 로그 + Loki 중앙집중 저장, 로그 레벨 구조화(JSON)

## 3. 시스템 아키텍처 설계

### 최상위 빌딩 블록
- 프런트엔드 (Next.js + Capacitor)  
  - 모바일 웹, iOS/Android 래퍼  
- Auth & Gateway (Supabase Auth, Edge Function)  
  - JWT 발급, 소셜 로그인, RLS 정책  
- Gacha Service (Node.js Micro-Service)  
  - 난수 생성, 카드 풀 로직, 감사 로그  
- Core API (Supabase RPC & REST)  
  - 포인트, 인벤토리, 상점, 주문  
- 외부 통합  
  - Stripe/Apple/Google/Toss 결제, SendGrid 이메일, WoTC 카드 API

### 컴포넌트 상호작용 다이어그램
```mermaid
graph TD
    A[Next.js/Capacitor 앱] -->|JWT| B[Supabase Edge Gateway]
    B -->|REST/RPC| C[Core API(PostgreSQL)]
    B -->|HTTPS| D[Gacha Service(Node)]
    C --> E[Redis Cache]
    B -->|Webhook| F[결제 게이트웨이(Stripe/IAP/Toss)]
```
- 클라이언트는 JWT 포함 요청으로 Edge Gateway 호출  
- Gateway는 Postgres 함수 또는 Gacha Service에 라우팅  
- Postgres는 Redis 캐시를 보조 저장소로 활용  
- 결제 완료 시 게이트웨이가 Webhook 수신 후 잔액·인벤토리 업데이트

### 코드 구성 & 컨벤션
**도메인 기반 조직 전략**
- **Bounded Context**: user, gacha, payment, inventory, store, admin  
- **계층 분리**: presentation → service → repository → infra  
- **기능 모듈**: 각 컨텍스트별 Feature 디렉터리  
- **공용 컴포넌트**: shared/lib, shared/ui, shared/types

**보편적 폴더 구조 트리**
```
/mtg-gacha
├── apps/
│   ├── web/                # Next.js
│   └── mobile/             # Capacitor wrapper
├── services/
│   └── gacha-engine/       # Node Express microservice
├── packages/
│   ├── shared-ui/
│   ├── shared-lib/
│   └── types/
├── database/
│   ├── migrations/
│   └── seeds/
└── infra/
    ├── docker/
    ├── github-actions/
    └── terraform/
```

### 데이터 흐름 & 통신 패턴
- **클라이언트-서버 통신**: HTTPS REST, Access Token은 Supabase JWT  
- **DB 상호작용**: Supabase RPC(Stored Procedure) + Prisma ORM(마이크로서비스)  
- **외부 서비스 통합**: Stripe SDK, Apple/Google IAP Server API, Toss REST  
- **실시간 통신**: Supabase Realtime(Channel) → 카드 풀 애니메이션 동기화  
- **데이터 동기화**: 이벤트 소싱(카드 풀 이벤트) + CDC(Logical Replication)

## 4. 성능 & 최적화 전략
- 페이지별 Code-Splitting과 이미지 lazy-loading으로 LCP 2.5 s 달성  
- Postgres 인덱스·파티션·Prepared Statement 적용으로 300 ms 이하 응답 유지  
- Redis 캐시 TTL 60 s로 인기 카드 메타데이터 응답 가속  
- Cloudflare CDN + Brotli 압축으로 정적 자산 전송 최적화

## 5. 구현 로드맵 & 마일스톤
### Phase 1: 기반(MVP 구현) – 4주
- 인프라 세팅(Vercel, Supabase, Fly.io)  
- 핵심 화면(로그인, 뽑기, 컬렉션) + Gacha 엔진 v1  
- Stripe 테스트 결제, Supabase Auth(소셜) 적용  
- CI/CD 파이프라인, 기본 보안(HTTPS, Helmet)  
### Phase 2: 기능 확장 – 3주
- 포인트 전환, 상점/주문, 이메일 영수증  
- Apple/Google IAP, Toss 결제 연동  
- 캐시·지표 모니터링, 성능 튜닝  
### Phase 3: 스케일링 & 최적화 – 4주
- 자동 확장(플라이 수평 스케일, Supabase 프리미엄 플랜)  
- AI 추천, 추천인 코드, 푸시 알림  
- GDPR/CCPA, PCI-DSS 준수 감사 로그  
- 부하 테스트, 99.9 % 가용성 목표

## 6. 위험 평가 & 대응 전략
### 기술적 위험
- **난수 공정성**: 외부 감사 RNG → Seed 기록·검증 API 제공  
- **성능 병목**: Gacha Service 집중 트래픽 → Fly 레플리카 오토스케일  
- **보안 취약점**: JWT 탈취, 인앱 해킹 → 2FA 옵션, Code-Obfuscation  
- **통합 실패**: 결제 Webhook 지연 → 재시도 큐(Redis Streams)  
- **대응**: Sentry 알림·Circuit Breaker 패턴

### 프로젝트 전달 위험
- **타임라인**: 외부 라이센스 승인 지연 → 법무 병렬 진행  
- **리소스**: 모바일 전문 인력 부족 → Capacitor로 웹 인력 전환  
- **품질**: 테스트 커버리지 80 % 미만 → GitHub Action 실패 시 병합 차단  
- **배포**: 앱스토어 심사 지연 → PWA 예비 배포  
- **컨틴전시**: 기능 플래그로 점진적 롤아웃, 블루-그린 배포


